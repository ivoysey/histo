<!doctype html>
<html>
<head>
    <title>histo</title>
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css">
    <style>
      body         { padding-top:80px; word-wrap:break-word; }

      .bar rect {
      fill: steelblue;
      shape-rendering: crispEdges;
      }

      .bar text {
      fill: #fff;
      }

      .axis path, .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
      }
    </style>
</head>
<body>
<script src="//d3js.org/d3.v3.min.js"></script>

<div class="container">
    <div class="row">

        <!-- LOCAL INFORMATION -->
        <div class="col-sm-6">
            <div class="well">
                <h3><span class="fa fa-user"></span> Local</h3>

                <% if (user.local.email) { %>
                    <p>
                        <strong>id</strong>: <%= user._id %><br>
                        <strong>email</strong>: <%= user.local.email %><br>
                    </p>

		    <a href="/logout" class="btn btn-default btn-sm">Logout</a>
                    <a href="/unlink/local" class="btn btn-default">Unlink</a>
                <% } else { %>
                    <a href="/connect/local" class="btn btn-default">Connect Local</a>
                <% } %>

            </div>
        </div>
    </div>

    <script>
      // code from http://bl.ocks.org/mbostock/3048450

      // Generate a Bates distribution of 10 random variables.
      var values = d3.range(1000).map(d3.random.bates(10));

      // TODO: change the values here to a query into the mongodb, once it
      // actually has age information

      // A formatter for counts.
      var formatCount = d3.format(",.0f");

      var margin = {top: 10, right: 30, bottom: 30, left: 30},
      width = 960 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;

      var x = d3.scale.linear()
      .domain([0, 1])
      .range([0, width]);

      // Generate a histogram using twenty uniformly-spaced bins.
      var data = d3.layout.histogram()
      .bins(x.ticks(20))
      (values);

      var y = d3.scale.linear()
      .domain([0, d3.max(data, function(d) { return d.y; })])
      .range([height, 0]);

      var xAxis = d3.svg.axis()
      .scale(x)
      .orient("bottom");

      var svg = d3.select("body").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top
      + ")");

      var bar = svg.selectAll(".bar")
      .data(data)
      .enter().append("g")
      .attr("class", "bar")
          .attr("transform", function(d) { return "translate(" + x(d.x) +
      "," + y(d.y) + ")"; });

      bar.append("rect")
      .attr("x", 1)
      .attr("width", x(data[0].dx) - 1)
      .attr("height", function(d) { return height - y(d.y); });

      bar.append("text")
      .attr("dy", ".75em")
      .attr("y", 6)
      .attr("x", x(data[0].dx) / 2)
      .attr("text-anchor", "middle")
      .text(function(d) { return formatCount(d.y); });

      svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

      </script>
</div>
</body>
</html>
